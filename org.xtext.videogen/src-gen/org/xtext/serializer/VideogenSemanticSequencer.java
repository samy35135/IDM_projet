/*
 * generated by Xtext
 */
package org.xtext.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.services.VideogenGrammarAccess;
import org.xtext.videogen.AlternativeVideoSeq;
import org.xtext.videogen.MandatoryVideoSeq;
import org.xtext.videogen.OptionalVideoSeq;
import org.xtext.videogen.Video;
import org.xtext.videogen.VideoGenModel;
import org.xtext.videogen.VideoPropriete;
import org.xtext.videogen.VideogenPackage;

@SuppressWarnings("all")
public class VideogenSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private VideogenGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == VideogenPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case VideogenPackage.ALTERNATIVE_VIDEO_SEQ:
				sequence_AlternativeVideoSeq(context, (AlternativeVideoSeq) semanticObject); 
				return; 
			case VideogenPackage.MANDATORY_VIDEO_SEQ:
				sequence_MandatoryVideoSeq(context, (MandatoryVideoSeq) semanticObject); 
				return; 
			case VideogenPackage.OPTIONAL_VIDEO_SEQ:
				sequence_OptionalVideoSeq(context, (OptionalVideoSeq) semanticObject); 
				return; 
			case VideogenPackage.VIDEO:
				sequence_Video(context, (Video) semanticObject); 
				return; 
			case VideogenPackage.VIDEO_GEN_MODEL:
				sequence_VideoGenModel(context, (VideoGenModel) semanticObject); 
				return; 
			case VideogenPackage.VIDEO_PROPRIETE:
				sequence_VideoPropriete(context, (VideoPropriete) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     video=Video
	 */
	protected void sequence_AlternativeVideoSeq(EObject context, AlternativeVideoSeq semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, VideogenPackage.Literals.VARIANTE_VIDEO__VIDEO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VideogenPackage.Literals.VARIANTE_VIDEO__VIDEO));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getAlternativeVideoSeqAccess().getVideoVideoParserRuleCall_1_0(), semanticObject.getVideo());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     video=Video
	 */
	protected void sequence_MandatoryVideoSeq(EObject context, MandatoryVideoSeq semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, VideogenPackage.Literals.VARIANTE_VIDEO__VIDEO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VideogenPackage.Literals.VARIANTE_VIDEO__VIDEO));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getMandatoryVideoSeqAccess().getVideoVideoParserRuleCall_1_0(), semanticObject.getVideo());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     video=Video
	 */
	protected void sequence_OptionalVideoSeq(EObject context, OptionalVideoSeq semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, VideogenPackage.Literals.VARIANTE_VIDEO__VIDEO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VideogenPackage.Literals.VARIANTE_VIDEO__VIDEO));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getOptionalVideoSeqAccess().getVideoVideoParserRuleCall_1_0(), semanticObject.getVideo());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     variante_videos+=VarianteVideo*
	 */
	protected void sequence_VideoGenModel(EObject context, VideoGenModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (probabilite=INT? duree=INT? description=STRING?)
	 */
	protected void sequence_VideoPropriete(EObject context, VideoPropriete semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (videoid=ID? chemin=STRING propriete=VideoPropriete)
	 */
	protected void sequence_Video(EObject context, Video semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
