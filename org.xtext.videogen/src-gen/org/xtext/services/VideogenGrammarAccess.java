/*
 * generated by Xtext
 */
package org.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class VideogenGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class VideoGenModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VideoGenModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVideoGenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLEFT_BRACKETTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cVariante_videosAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariante_videosVarianteVideoParserRuleCall_2_0 = (RuleCall)cVariante_videosAssignment_2.eContents().get(0);
		private final RuleCall cRIGHT_BRACKETTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		/// *
		// * VideoGenModel contiendra toute la syntaxe
		// * ? 0 ou 1
		// * + au moins 1
		// * * > 1
		// * / VideoGenModel:
		//	"VideoGen" LEFT_BRACKET variante_videos+=VarianteVideo* RIGHT_BRACKET;
		@Override public ParserRule getRule() { return rule; }

		//"VideoGen" LEFT_BRACKET variante_videos+=VarianteVideo* RIGHT_BRACKET
		public Group getGroup() { return cGroup; }

		//"VideoGen"
		public Keyword getVideoGenKeyword_0() { return cVideoGenKeyword_0; }

		//LEFT_BRACKET
		public RuleCall getLEFT_BRACKETTerminalRuleCall_1() { return cLEFT_BRACKETTerminalRuleCall_1; }

		//variante_videos+=VarianteVideo*
		public Assignment getVariante_videosAssignment_2() { return cVariante_videosAssignment_2; }

		//VarianteVideo
		public RuleCall getVariante_videosVarianteVideoParserRuleCall_2_0() { return cVariante_videosVarianteVideoParserRuleCall_2_0; }

		//RIGHT_BRACKET
		public RuleCall getRIGHT_BRACKETTerminalRuleCall_3() { return cRIGHT_BRACKETTerminalRuleCall_3; }
	}

	public class VarianteVideoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarianteVideo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMandatoryVideoSeqParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOptionalVideoSeqParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAlternativeVideoSeqParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		/// ** 
		// * une variante de vidéo est composée d'une video obligatoire (mandatory) 
		// * puis de vidéos optionnal et d'alternatives
		// * / VarianteVideo:
		//	MandatoryVideoSeq | OptionalVideoSeq | AlternativeVideoSeq;
		@Override public ParserRule getRule() { return rule; }

		//MandatoryVideoSeq | OptionalVideoSeq | AlternativeVideoSeq
		public Alternatives getAlternatives() { return cAlternatives; }

		//MandatoryVideoSeq
		public RuleCall getMandatoryVideoSeqParserRuleCall_0() { return cMandatoryVideoSeqParserRuleCall_0; }

		//OptionalVideoSeq
		public RuleCall getOptionalVideoSeqParserRuleCall_1() { return cOptionalVideoSeqParserRuleCall_1; }

		//AlternativeVideoSeq
		public RuleCall getAlternativeVideoSeqParserRuleCall_2() { return cAlternativeVideoSeqParserRuleCall_2; }
	}

	public class MandatoryVideoSeqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MandatoryVideoSeq");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMandatoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVideoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVideoVideodescParserRuleCall_1_0 = (RuleCall)cVideoAssignment_1.eContents().get(0);
		
		//MandatoryVideoSeq:
		//	"mandatory" video=Videodesc;
		@Override public ParserRule getRule() { return rule; }

		//"mandatory" video=Videodesc
		public Group getGroup() { return cGroup; }

		//"mandatory"
		public Keyword getMandatoryKeyword_0() { return cMandatoryKeyword_0; }

		//video=Videodesc
		public Assignment getVideoAssignment_1() { return cVideoAssignment_1; }

		//Videodesc
		public RuleCall getVideoVideodescParserRuleCall_1_0() { return cVideoVideodescParserRuleCall_1_0; }
	}

	public class OptionalVideoSeqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OptionalVideoSeq");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptionalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVideoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVideoVideodescParserRuleCall_1_0 = (RuleCall)cVideoAssignment_1.eContents().get(0);
		
		//OptionalVideoSeq:
		//	"optional" video=Videodesc;
		@Override public ParserRule getRule() { return rule; }

		//"optional" video=Videodesc
		public Group getGroup() { return cGroup; }

		//"optional"
		public Keyword getOptionalKeyword_0() { return cOptionalKeyword_0; }

		//video=Videodesc
		public Assignment getVideoAssignment_1() { return cVideoAssignment_1; }

		//Videodesc
		public RuleCall getVideoVideodescParserRuleCall_1_0() { return cVideoVideodescParserRuleCall_1_0; }
	}

	public class AlternativeVideoSeqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AlternativeVideoSeq");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlternativeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVideoidAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVideoidIDTerminalRuleCall_1_0 = (RuleCall)cVideoidAssignment_1.eContents().get(0);
		private final RuleCall cLEFT_BRACKETTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cVideoAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVideoVideodescParserRuleCall_3_0 = (RuleCall)cVideoAssignment_3.eContents().get(0);
		private final RuleCall cRIGHT_BRACKETTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//AlternativeVideoSeq:
		//	"alternative" videoid=ID? LEFT_BRACKET video+=Videodesc RIGHT_BRACKET;
		@Override public ParserRule getRule() { return rule; }

		//"alternative" videoid=ID? LEFT_BRACKET video+=Videodesc RIGHT_BRACKET
		public Group getGroup() { return cGroup; }

		//"alternative"
		public Keyword getAlternativeKeyword_0() { return cAlternativeKeyword_0; }

		//videoid=ID?
		public Assignment getVideoidAssignment_1() { return cVideoidAssignment_1; }

		//ID
		public RuleCall getVideoidIDTerminalRuleCall_1_0() { return cVideoidIDTerminalRuleCall_1_0; }

		//LEFT_BRACKET
		public RuleCall getLEFT_BRACKETTerminalRuleCall_2() { return cLEFT_BRACKETTerminalRuleCall_2; }

		//video+=Videodesc
		public Assignment getVideoAssignment_3() { return cVideoAssignment_3; }

		//Videodesc
		public RuleCall getVideoVideodescParserRuleCall_3_0() { return cVideoVideodescParserRuleCall_3_0; }

		//RIGHT_BRACKET
		public RuleCall getRIGHT_BRACKETTerminalRuleCall_4() { return cRIGHT_BRACKETTerminalRuleCall_4; }
	}

	public class VideodescElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Videodesc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVideoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVideoidAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVideoidIDTerminalRuleCall_1_0 = (RuleCall)cVideoidAssignment_1.eContents().get(0);
		private final Assignment cCheminAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCheminSTRINGTerminalRuleCall_2_0 = (RuleCall)cCheminAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cLEFT_BRACKETTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cDureeKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cDureeAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cDureeINTTerminalRuleCall_3_1_1_0 = (RuleCall)cDureeAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cDescriptionKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_2_1_0 = (RuleCall)cDescriptionAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cProbabiliteKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cProbabiliteAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cProbabiliteINTTerminalRuleCall_3_3_1_0 = (RuleCall)cProbabiliteAssignment_3_3_1.eContents().get(0);
		private final RuleCall cRIGHT_BRACKETTerminalRuleCall_3_4 = (RuleCall)cGroup_3.eContents().get(4);
		
		/// **
		// * La vidéo à un ID et son chemin, propriété : Une description, 
		// * sa durée, sa probabilité d'apparition
		// * / Videodesc:
		//	"video" videoid=ID? chemin=STRING (LEFT_BRACKET ("duree" duree=INT)? ("description" description=STRING)?
		//	("probabilite" probabilite=INT)? RIGHT_BRACKET)?;
		@Override public ParserRule getRule() { return rule; }

		//"video" videoid=ID? chemin=STRING (LEFT_BRACKET ("duree" duree=INT)? ("description" description=STRING)? ("probabilite"
		//probabilite=INT)? RIGHT_BRACKET)?
		public Group getGroup() { return cGroup; }

		//"video"
		public Keyword getVideoKeyword_0() { return cVideoKeyword_0; }

		//videoid=ID?
		public Assignment getVideoidAssignment_1() { return cVideoidAssignment_1; }

		//ID
		public RuleCall getVideoidIDTerminalRuleCall_1_0() { return cVideoidIDTerminalRuleCall_1_0; }

		//chemin=STRING
		public Assignment getCheminAssignment_2() { return cCheminAssignment_2; }

		//STRING
		public RuleCall getCheminSTRINGTerminalRuleCall_2_0() { return cCheminSTRINGTerminalRuleCall_2_0; }

		//(LEFT_BRACKET ("duree" duree=INT)? ("description" description=STRING)? ("probabilite" probabilite=INT)? RIGHT_BRACKET)?
		public Group getGroup_3() { return cGroup_3; }

		//LEFT_BRACKET
		public RuleCall getLEFT_BRACKETTerminalRuleCall_3_0() { return cLEFT_BRACKETTerminalRuleCall_3_0; }

		//("duree" duree=INT)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"duree"
		public Keyword getDureeKeyword_3_1_0() { return cDureeKeyword_3_1_0; }

		//duree=INT
		public Assignment getDureeAssignment_3_1_1() { return cDureeAssignment_3_1_1; }

		//INT
		public RuleCall getDureeINTTerminalRuleCall_3_1_1_0() { return cDureeINTTerminalRuleCall_3_1_1_0; }

		//("description" description=STRING)?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"description"
		public Keyword getDescriptionKeyword_3_2_0() { return cDescriptionKeyword_3_2_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_3_2_1() { return cDescriptionAssignment_3_2_1; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_2_1_0() { return cDescriptionSTRINGTerminalRuleCall_3_2_1_0; }

		//("probabilite" probabilite=INT)?
		public Group getGroup_3_3() { return cGroup_3_3; }

		//"probabilite"
		public Keyword getProbabiliteKeyword_3_3_0() { return cProbabiliteKeyword_3_3_0; }

		//probabilite=INT
		public Assignment getProbabiliteAssignment_3_3_1() { return cProbabiliteAssignment_3_3_1; }

		//INT
		public RuleCall getProbabiliteINTTerminalRuleCall_3_3_1_0() { return cProbabiliteINTTerminalRuleCall_3_3_1_0; }

		//RIGHT_BRACKET
		public RuleCall getRIGHT_BRACKETTerminalRuleCall_3_4() { return cRIGHT_BRACKETTerminalRuleCall_3_4; }
	}
	
	
	private final VideoGenModelElements pVideoGenModel;
	private final VarianteVideoElements pVarianteVideo;
	private final MandatoryVideoSeqElements pMandatoryVideoSeq;
	private final OptionalVideoSeqElements pOptionalVideoSeq;
	private final AlternativeVideoSeqElements pAlternativeVideoSeq;
	private final VideodescElements pVideodesc;
	private final TerminalRule tLEFT_BRACKET;
	private final TerminalRule tRIGHT_BRACKET;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public VideogenGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pVideoGenModel = new VideoGenModelElements();
		this.pVarianteVideo = new VarianteVideoElements();
		this.pMandatoryVideoSeq = new MandatoryVideoSeqElements();
		this.pOptionalVideoSeq = new OptionalVideoSeqElements();
		this.pAlternativeVideoSeq = new AlternativeVideoSeqElements();
		this.pVideodesc = new VideodescElements();
		this.tLEFT_BRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LEFT_BRACKET");
		this.tRIGHT_BRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RIGHT_BRACKET");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.Videogen".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// *
	// * VideoGenModel contiendra toute la syntaxe
	// * ? 0 ou 1
	// * + au moins 1
	// * * > 1
	// * / VideoGenModel:
	//	"VideoGen" LEFT_BRACKET variante_videos+=VarianteVideo* RIGHT_BRACKET;
	public VideoGenModelElements getVideoGenModelAccess() {
		return pVideoGenModel;
	}
	
	public ParserRule getVideoGenModelRule() {
		return getVideoGenModelAccess().getRule();
	}

	/// ** 
	// * une variante de vidéo est composée d'une video obligatoire (mandatory) 
	// * puis de vidéos optionnal et d'alternatives
	// * / VarianteVideo:
	//	MandatoryVideoSeq | OptionalVideoSeq | AlternativeVideoSeq;
	public VarianteVideoElements getVarianteVideoAccess() {
		return pVarianteVideo;
	}
	
	public ParserRule getVarianteVideoRule() {
		return getVarianteVideoAccess().getRule();
	}

	//MandatoryVideoSeq:
	//	"mandatory" video=Videodesc;
	public MandatoryVideoSeqElements getMandatoryVideoSeqAccess() {
		return pMandatoryVideoSeq;
	}
	
	public ParserRule getMandatoryVideoSeqRule() {
		return getMandatoryVideoSeqAccess().getRule();
	}

	//OptionalVideoSeq:
	//	"optional" video=Videodesc;
	public OptionalVideoSeqElements getOptionalVideoSeqAccess() {
		return pOptionalVideoSeq;
	}
	
	public ParserRule getOptionalVideoSeqRule() {
		return getOptionalVideoSeqAccess().getRule();
	}

	//AlternativeVideoSeq:
	//	"alternative" videoid=ID? LEFT_BRACKET video+=Videodesc RIGHT_BRACKET;
	public AlternativeVideoSeqElements getAlternativeVideoSeqAccess() {
		return pAlternativeVideoSeq;
	}
	
	public ParserRule getAlternativeVideoSeqRule() {
		return getAlternativeVideoSeqAccess().getRule();
	}

	/// **
	// * La vidéo à un ID et son chemin, propriété : Une description, 
	// * sa durée, sa probabilité d'apparition
	// * / Videodesc:
	//	"video" videoid=ID? chemin=STRING (LEFT_BRACKET ("duree" duree=INT)? ("description" description=STRING)?
	//	("probabilite" probabilite=INT)? RIGHT_BRACKET)?;
	public VideodescElements getVideodescAccess() {
		return pVideodesc;
	}
	
	public ParserRule getVideodescRule() {
		return getVideodescAccess().getRule();
	}

	//terminal LEFT_BRACKET:
	//	"{";
	public TerminalRule getLEFT_BRACKETRule() {
		return tLEFT_BRACKET;
	} 

	//terminal RIGHT_BRACKET:
	//	"}";
	public TerminalRule getRIGHT_BRACKETRule() {
		return tRIGHT_BRACKET;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
