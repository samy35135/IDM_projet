package transformation

import java.util.HashMap
import org.xtext.VideogenStandaloneSetup
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.xtext.videogen.VideoGenModel
import org.xtext.videogen.AlternativeVideoSeq
import org.xtext.videogen.MandatoryVideoSeq
import org.xtext.videogen.OptionalVideoSeq
import java.util.Random
import java.io.File
import java.io.FileWriter
import Playlist.impl.PlaylistFactoryImpl
import Playlist.impl.PlaylistImpl



class videotransfo {
	new(){}

	def loadVideoGenerator(URI uri) {		
		new VideogenStandaloneSetup().createInjectorAndDoEMFRegistration()
		var res = new ResourceSetImpl().getResource(uri, true)
		res.contents.get(0) as VideoGenModel
	}

	
	def saveVideoGenerator(URI uri, VideoGenModel pollS) {
		var Resource rs = new ResourceSetImpl().createResource(uri) 
		rs.getContents.add(pollS)
		rs.save(new HashMap())
	}
	
	def VideoToText(URI uri, VideoGenModel videogen){
        var File file = new File(uri.toString);
        val FileWriter fw = new FileWriter(file, true);
        
		videogen.variante_videos.forEach[video | 
			if (video instanceof AlternativeVideoSeq) {
				println("alternative")
				var size = video.video.size;
				var index = new Random().nextInt(size)
				
				fw.write("file '"+video.video.get(index).chemin+"'\n")
			} else if(video instanceof MandatoryVideoSeq){
				println("mandatory")
				fw.write("file '"+video.video.chemin+"'\n")
				
			} else if(video instanceof OptionalVideoSeq) {
				var rand = new Random().nextInt(2)
				if(rand > 0){
					println("optional")
					fw.write("file '"+video.video.chemin+"'\n")
				}
			} else {
				println("erreur");
			}
		]
		
		fw.close();
	}
		
	def modeltoplaylist(VideoGenModel videogen){
		var PlaylistFactoryImpl playlistFactory = PlaylistFactoryImpl.init() as PlaylistFactoryImpl
        val PlaylistImpl playlistimpl = playlistFactory.createPlaylist() as PlaylistImpl
       
  		videogen.variante_videos.forEach[video|
  			var Videodesc videodesc = null
  			
  		]
  		}

	def static void main(String[] args) {
		var videotransfo = new videotransfo	
		var videoGen = videotransfo.loadVideoGenerator(URI.createURI("/Users/matthieucolliaux/Documents/Work/IDM/runtime-EclipseXtext/videogen/Sample.mydsl"))	
		videotransfo.VideoToText(URI.createURI("/Users/matthieucolliaux/Documents/Work/IDM/listvideo.txt"), videoGen)

	}
	
}
