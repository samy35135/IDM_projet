package transformation

import java.util.HashMap
import org.xtext.VideogenStandaloneSetup
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.xtext.videogen.VideoGenModel
import org.xtext.videogen.AlternativeVideoSeq
import org.xtext.videogen.MandatoryVideoSeq
import org.xtext.videogen.OptionalVideoSeq
import java.util.Random
import java.io.File
import java.io.FileWriter
import org.xtext.videogen.VarianteVideo

class videotransfo {
	new(){}

	def loadVideoGenerator(URI uri) {		
		new VideogenStandaloneSetup().createInjectorAndDoEMFRegistration()
		var res = new ResourceSetImpl().getResource(uri, true)
		res.contents.get(0) as VideoGenModel
	}

	
	def saveVideoGenerator(URI uri, VideoGenModel pollS) {
		var Resource rs = new ResourceSetImpl().createResource(uri) 
		rs.getContents.add(pollS)
		rs.save(new HashMap())
	}
	     
    /**
	 * permet de déterminer le genre de VarianteVideo
	 * @return int : A si Mandatory, 2 si Optional, 3 si alternative, 4 erreur
	 */
	def private static getType(VarianteVideo video){
		if (video instanceof MandatoryVideoSeq ) {
			return 1;
		} else if(video instanceof OptionalVideoSeq ){
			return 2;
		} else if(video instanceof AlternativeVideoSeq ) {
			return 3;
		}else{
			return 4;
		}
	}
	
	/**
	 * permet de créer un fichier texte avec une liste de vidéos 
	 * à  partir d'un modele qui respecte la grammaire
	 * 
	 */
	def VideoToText(URI uri, VideoGenModel videogen){
        var File file = new File(uri.toString);
        val FileWriter fw = new FileWriter(file, true);
              
		videogen.variante_videos.forEach[video | 
			var typevideo = getType(video);
			
  			// déleguation du traitement à d'autres fonctions
  			// Le but est d'affecter videoDesc
  	 		switch typevideo {
  				case 1: fw.write("file'"+gererMandatory(video as MandatoryVideoSeq).chemin+"'\n")
  				case 2 : fw.write("file '"+gererOptional(video as OptionalVideoSeq).chemin+"'\n")
  				case 3 : gererAlternative(video as AlternativeVideoSeq)
  				default : println("erreur")
  			}
			
			
		/* 	if (video instanceof AlternativeVideoSeq) {
				println("alternative")
				var size = video.video.size;
				var index = new Random().nextInt(size)
				
				fw.write("file '"+video.video.get(index).chemin+"'\n")
			} else if(video instanceof MandatoryVideoSeq){
				println("mandatory")
				fw.write("file '"+video.video.chemin+"'\n")
				
			} else if(video instanceof OptionalVideoSeq) {
				var rand = new Random().nextInt(2)
				if(rand > 0){
					println("optional")
					fw.write("file '"+video.video.chemin+"'\n")
				}
			} else {
				println("erreur");
			}*/
		]
		
		fw.close();
	}
	/// Gestions séparée pour chaque variantevideo
	
	/**
	 * @return videodesc
	 */
 	def private static gererMandatory(MandatoryVideoSeq video){
		return video.video;
	}
/**
	 * @return videodesc
	 */
 	def private static gererOptional(OptionalVideoSeq video){
 		var rand = new Random().nextInt(2)
				if(rand > 0){
					return video.video;
				}else{
					return null
				}		
	}

	def static void main(String[] args) {
		var videotransfo = new videotransfo	
		var videoGen = videotransfo.loadVideoGenerator(URI.createURI("/Users/matthieucolliaux/Documents/Work/IDM/runtime-EclipseXtext/videogen/Sample.mydsl"))	
		videotransfo.VideoToText(URI.createURI("/Users/matthieucolliaux/Documents/Work/IDM/listvideo.txt"), videoGen)

	}
	
}
